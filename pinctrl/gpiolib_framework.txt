

                                                                                                   .------------------------. .------------------------.  .------------------------.  .------------------------.  .------------------------.
                                                                                                   |          App1          | |           App2         |  |           App3         |  |           App4         |  |           App5         |
                                                                                                   '------------------------' '------------------------'  '------------------------'  '------------------------'  '------------------------'





                                                                                                                                                                                               .---------------------------------------------.
                                                                                                                                                                                               | echo 21 > /sys/class/gpio/export            |
                                                                                                                                  .----------.                                                 | echo out > /sys/class/gpio/gpio21/direction |
           -----------------------------------------------------------------------------------------------------------------------| /dev/xxx |-------------------------------------------------| echo 1 > /sys/class/gpio/gpio21/value       |-----------------------------------------------------------------------------------------------------
                                                                                                                                  '----------'                                                 | echo 0 > /sys/class/gpio/gpio21/value       |
                                                                                                                                                                                               | echo 21 > /sys/class/gpio/unexport          |
                                                     .----------------------.    .----------------------. .----------------------.                                                             '---------------------------------------------'
                                                     |                      |    |                      | |                      |
                                                     | other device driver1 |    | other device driver2 | | other device driver3 |                        .-----------------------------.
                                                     |                      |    |                      | |                      |                        |     gpio_free               |
                                                     '----------------------'    '----------------------' '----------------------'                        |     gpio_request_one        |
                                                                                                                                                          |     gpio_request            |
                                                                                                                                                          |     gpio_request_array      |
                                                                                                                                                          |     gpio_free_array         |
                                                                                                                                                          |                             |
                                                                                                                                                          |     gpio_is_valid           |
                                                                                                                                                          |     gpio_to_chip            |
.--------------.                                                                                                                                          |     gpio_direction_input    |
| gpio_devices |                                                                                                                                          |     gpio_direction_output   |
'--------------'                                                                                                                                          |     gpio_set_debounce       |
        |    .-------------.    .-------------.    .-------------.     .----.                                                                             |     gpio_get_value_cansleep |
        '--->| gpio_device |--->| gpio_device |--->| gpio_device |---->| .. |                                                                             |     gpio_set_value_cansleep |
             '-------------'    '-------------'    '-------------'     '----'                                                                             |     __gpio_get_value        |
                                                                                                                                                          |     __gpio_set_value        |
                                                                                                                                                          |     __gpio_cansleep         |
                                                                                                                                                          |     __gpio_to_irq           |
                                                                                                                                                          |     gpio_export             |
                                                                                                                                                          |     gpio_export_link        |
                                                                                                                                                          |     gpio_unexport           |
                                                                          .-------------------------------------------------------------------------------|     gpio_is_valid           |---------------------------------------------------------------------------------------------------.
 /* internal state container for GPIO devices. bank desc (linked list)*/  |                                                                               |     gpio_cansleep           |                                                                                                   |
 struct gpio_device {                                                     |                                                                               |     gpio_get_value_cansleep |                                                                                                   |
    int         id;                                                       |                                                                               |     gpio_set_value_cansleep |                                                                                                   |
    struct device      dev;                                               |                                                                               '-----------------------------'                                                                                                   |
    struct cdev      chrdev;                                              |                                                                                                                                                                                 gpio driver framework(gpiolib)  |
    struct device      *mockdev;                                          |                                                                                                                                                                                                                 |
    struct module      *owner;                                            |                                                                                                                                                                                                                 |
    struct gpio_chip   *chip;                                             |                                                                                                                                                                                                                 |
    struct gpio_desc   *descs;                                            '-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
    int         base;                                                                                                                                                                                                                                                            ^
    u16         ngpio;                                                    初期化完了後:                                                                                                                                                                                          |
    const char      *label;                                                     .--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.         |
    void         *data;                                                         |                                                                                                                                                                     soc gpio driver  |         |
    struct list_head        list;                                               |  .----------------------------------------------------------------------------------------------------------------------------------------.        .-----------------------------.   |         |
                                                                                |  | struct gpio_chip 0番を実現(abstract a GPIO controller):                                                                                |        |struct gpio_chip n番を実現:  |   |         |
 #ifdef CONFIG_PINCTRL                                                          |  |                                                                                                                                        |        |                             |   |         |
    /*                                                                          |  |                .-------------------.  .-------------------.  .-------------------.            .-------------------.                    |        |                             |   |         |
     * If CONFIG_PINCTRL is enabled, then gpio controllers can optionally       |  |                |      bank0        |  |       bank1       |  |       bank2       |            |       bankN       |                    |        |                             |   |         |
     * describe the actual pin range which they serve in an SoC. This           |  |                |  .-------------.  |  | .-------------.   |  |  .-------------.  |            |  .-------------.  |                    |        |                             |   |         |
     * information would be used by pinctrl subsystem to configure              |  |                |  |   gpio0_0   |  |  | |   gpio1_0   |   |  |  |   gpio2_0   |  |            |  |   gpioN_0   |  |                    |        |                             |   |         |
     * corresponding pins for gpio usage.                                       |  |                |  '-------------'  |  | '-------------'   |  |  '-------------'  |            |  '-------------'  |                    |        |                             |   |         |
     */                                                                         |  |                |  .-------------.  |  | .-------------.   |  |  .-------------.  |            |  .-------------.  |                    |        |                             |   |         |
    struct list_head pin_ranges;                                                |  |                |  |   gpio0_1   |  |  | |   gpio1_1   |   |  |  |   gpio2_1   |  |            |  |   gpioN_1   |  | struct gpio_device |        |                             |   |         |
 #endif                                                                         |  |                |  '-------------'  |  | '-------------'   |  |  '-------------'  |            |  '-------------'  |          |         |        |                             |   |         |
 };                                                                             |  |                |  .-------------.  |  | .-------------.   |  |  .-------------.  |     ...    |  .-------------.  |          |         |   ...  |                             |   |         |
                                                                                |  |                |  |   gpio0_2   |  |  | |   gpio1_2   |   |  |  |   gpio2_2   |  |            |  |   gpioN_2   |  |<---------'         |        |                             |   |         |gpiochip_add()
 struct gpio_desc {         /* pin desc */                                      |  |                |  '-------------'  |  | '-------------'   |  |  '-------------'  |            |  '-------------'  |                    |        |                             |   |         |
    struct gpio_device   *gdev;                                                 |  |                |                   |  |                   |  |                   |            |                   |                    |        |                             |   |         |
    unsigned long      flags;                                                   |  |                |      ...          |  |       ...         |  |        ...        |            |         ...       |                    |        |                             |   |         |
 /* flag symbols are bit numbers */                                             |  |                |                   |  |                   |  |                   |            |                   |                    |        |                             |   |         |
 #define FLAG_REQUESTED   0                                                     |  |                |  .-------------.  |  |  .-------------.  |  |  .-------------.  |            |  .-------------.  |                    |        |                             |   |         |
 #define FLAG_IS_OUT   1                                                        |  |                |  |   gpio0_N   |  |  |  |   gpio1_N   |  |  |  |   gpio2_N   |  |            |  |   gpioN_N   |<----struct gpio_desc  |        |                             |   |         |
 #define FLAG_EXPORT   2  /* protected by sysfs_lock */                         |  |                |  '-------------'  |  |  '-------------'  |  |  '-------------'  |            |  '-------------'  |                    |        |                             |   |         |
 #define FLAG_SYSFS   3   /* exported via /sys/class/gpio/control */            |  |                '-------------------'  '-------------------'  '-------------------'            '-------------------'                    |        |                             |   |         |
 #define FLAG_ACTIVE_LOW   6  /* value has active low */                        |  |                                                                                                                                        |        |                             |   |         |
 #define FLAG_OPEN_DRAIN   7  /* Gpio is open drain type */                     |  |                                                                                                                                        |        |                             |   |         |
 #define FLAG_OPEN_SOURCE 8   /* Gpio is open source type */                    |  '----------------------------------------------------------------------------------------------------------------------------------------'        '-----------------------------'   |---------'
 #define FLAG_USED_AS_IRQ 9   /* GPIO is connected to an IRQ */                 |                                                                                                                                                                                      |
 #define FLAG_IRQ_IS_ENABLED 10 /* GPIO is connected to an enabled IRQ */       '--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
 #define FLAG_IS_HOGGED   11  /* GPIO is hogged */
 #define FLAG_TRANSITORY 12   /* GPIO may lose value in sleep or reset */
 #define FLAG_PULL_UP    13   /* GPIO has pull up enabled */                                                                    .----------------------------------------------------------------------------------------------------------------------------.
 #define FLAG_PULL_DOWN  14   /* GPIO has pull down enabled */                    struct gpio_array {                           |                                                  soc gpio pins/gpio chips                                                  |
                                                                                     struct gpio_desc   **desc;                 |                                                                                                                            |
    /* Connection label */                                                           unsigned int      size;                    |  |  |  |   |  |  |   |  | | |  |  |  |  |   | |  |  |  |  |   |  |   |  | |  | |  |  |  |   | | |  |  | |  | |  | |  |  |  |
    const char      *label;                                                          struct gpio_chip   *chip;                  '--|--|--|---|--|--|---|--|-|-|--|--|--|--|---|-|--|--|--|--|---|--|---|--|-|--|-|--|--|--|---|-|-|--|--|-|--|-|--|-|--|--|--'
    /* Name of the GPIO */                                                           unsigned long      *get_mask;                 |  |  |   |  |  |   |  | | |  |  |  |  |   | |  |  |  |  |   |  |   |  | |  | |  |  |  |   | | |  |  | |  | |  | |  |  |
    const char      *name;                                                           unsigned long      *set_mask;
 };                                                                                  unsigned long      invert_mask[];
                                                                                  };
 /* abstract a GPIO controller */
 struct gpio_chip {
    const char      *label;
    struct gpio_device   *gpiodev;
    struct device      *parent;
    struct module      *owner;

    int         (*request)(struct gpio_chip *chip,
                   unsigned offset);
    void         (*free)(struct gpio_chip *chip,
                   unsigned offset);
    int         (*get_direction)(struct gpio_chip *chip,
                   unsigned offset);
    int         (*direction_input)(struct gpio_chip *chip,
                   unsigned offset);
    int         (*direction_output)(struct gpio_chip *chip,
                   unsigned offset, int value);
    int         (*get)(struct gpio_chip *chip,
                   unsigned offset);                                      
    int         (*get_multiple)(struct gpio_chip *chip,                   
                   unsigned long *mask,                                   
                   unsigned long *bits);                                  
    void         (*set)(struct gpio_chip *chip,                           
                   unsigned offset, int value);                           
    void         (*set_multiple)(struct gpio_chip *chip,                  
                   unsigned long *mask,                                   
                   unsigned long *bits);                                  
    int         (*set_config)(struct gpio_chip *chip,                     
                      unsigned offset,                                    
                      unsigned long config);                              
    int         (*to_irq)(struct gpio_chip *chip,                         
                   unsigned offset);                                      
                                                                          
    void         (*dbg_show)(struct seq_file *s,                          
                   struct gpio_chip *chip);                               
                                                                          
    int         (*init_valid_mask)(struct gpio_chip *chip,                
                      unsigned long *valid_mask,                          
                      unsigned int ngpios);                               
                                                                          
    int         base;                                                     
    u16         ngpio;                                                    
    const char      *const *names;                                        
    bool         can_sleep;                                               
                                                                          
 #if IS_ENABLED(CONFIG_GPIO_GENERIC)                                      
    unsigned long (*read_reg)(void __iomem *reg);                         
    void (*write_reg)(void __iomem *reg, unsigned long data);             
    bool be_bits;                                                         
    void __iomem *reg_dat;                                                
    void __iomem *reg_set;                                                
    void __iomem *reg_clr;                                                
    void __iomem *reg_dir_out;                                            
    void __iomem *reg_dir_in;                                             
    bool bgpio_dir_unreadable;                                            
    int bgpio_bits;                                                       
    spinlock_t bgpio_lock;                                                
    unsigned long bgpio_data;                                             
    unsigned long bgpio_dir;                                              
 #endif /* CONFIG_GPIO_GENERIC */                                         
                                                                          
 #ifdef CONFIG_GPIOLIB_IRQCHIP                                            
    /*                                                                    
     * With CONFIG_GPIOLIB_IRQCHIP we get an irqchip inside the gpiolib   
     * to handle IRQs for most practical cases.                           
     */                                                                   
                                                                          
    /**                                                                   
     * @irq:                                                              
     *                                                                    
     * Integrates interrupt chip functionality with the GPIO chip. Can be 
     * used to handle IRQs for most practical cases.                      
     */                                                                   
    struct gpio_irq_chip irq;                                             
 #endif /* CONFIG_GPIOLIB_IRQCHIP */                                      
                                                                          
    /**                                                                   
     * @valid_mask:                                                       
     *                                                                    
     * If not %NULL holds bitmask of GPIOs which are valid to be used     
     * from the chip.                                                     
     */                                                                   
    unsigned long *valid_mask;                                            
                                                                          
 #if defined(CONFIG_OF_GPIO)                                              
    /*                                                                    
     * If CONFIG_OF is enabled, then all GPIO controllers described in the
     * device tree automatically may have an OF translation               
     */                                                                   
                                                                          
    /**                                                                   
     * @of_node:                                                          
     *                                                                    
     * Pointer to a device tree node representing this GPIO controller.   
     */                                                                   
    struct device_node *of_node;                                          
                                                                          
    /**                                                                   
     * @of_gpio_n_cells:                                                  
     *                                                                    
     * Number of cells used to form the GPIO specifier.                   
     */                                                                   
    unsigned int of_gpio_n_cells;                                         
                                                                          
    /**                                                                   
     * @of_xlate:                                                         
     *                                                                    
     * Callback to translate a device tree GPIO specifier into a chip-    
     * relative GPIO number and flags.                                    
     */                                                                   
    int (*of_xlate)(struct gpio_chip *gc,                                 
          const struct of_phandle_args *gpiospec, u32 *flags);            
 #endif /* CONFIG_OF_GPIO */                                              
 };                                                                       
